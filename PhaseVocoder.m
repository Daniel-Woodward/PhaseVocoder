clear; clc;[y,fs]=audioread('input.mp3');                 y = y';%Hop Lengthshopin=150;                                  hopout=300;                                %Hardcoded values and variablesall2pi=2*pi*(0:50);                      nfft=2^12; nfft2=nfft/2;                  win=hanning(nfft)';                         leny=length(y);         outputVec=zeros(1,ceil(hopout/hopin)*leny);  lenseg=(leny-nfft)/hopin;       FreqBinValues=fs*(0:nfft2)/nfft;                     phold=zeros(1,nfft2+1); phadvance=zeros(1,nfft2+1);PartialOut=zeros(1,nfft); pold1=[]; pold2=[];% dealt t for input and ouput, used in time stretching ratiodtin=hopin/fs;                            dtout=hopout/fs;                           %loop over all segements of signalfor k=1:lenseg-1     %Get a windowed segement and apply FFT    window=round(((k-1)*hopin+1):((k-1)*hopin+nfft));    s=win.*y(window);                    ffts=fft(s);        %Get magnitude and phases of windowed segement    mag=abs(ffts(1:nfft2+1));     ph=angle(ffts(1:nfft2+1));    % find peaks for Freq search    [dummy, inds]=findpeaks(mag);    peaks = zeros(length(inds),3);    peaks(:,2) = inds;    for i = 1:length(inds)        peaks(i,1) = inds(i)-1;        peaks(i,3) = inds(i)+1;    end    [dummy,inds]=sort(mag(peaks));             peaksort=peaks(inds,:);                             pc=peaksort(:,2);        %inital estimate for frequency    bestf=zeros(size(pc));        %Frequency Search using phase    for tk=1:length(pc)                          dtheta=(ph(pc(tk))-phold(pc(tk)))+all2pi;        fest=dtheta./(2*pi*dtin);              [er,indf]=min(abs(FreqBinValues(pc(tk))-fest));        bestf(tk)=fest(indf);            end    magout=mag;     phout=ph;    for tk=1:length(pc)        fdes=bestf(tk);                                  freqind=(peaksort(tk,1):peaksort(tk,3));          %  adjusted mag and phase for f0 and overtones        magout(freqind)=mag(freqind);        phadvance(peaksort(tk,2))=phadvance(peaksort(tk,2))+2*pi*fdes*dtout;        pizero=pi*ones(1,length(freqind));        pcent=peaksort(tk,2)-peaksort(tk,1)+1;        indpc=(2-mod(pcent,2)):2:length(freqind);        pizero(indpc)=zeros(1,length(indpc));        phout(freqind)=phadvance(peaksort(tk,2))+pizero;    end    % reconstruct time signal (stretched or compressed)    FreqValues=magout.*exp(sqrt(-1)*phout);    FreqValues(nfft2+1)=ffts(nfft2+1);    FreqValues=[FreqValues,fliplr(conj(FreqValues(2:(nfft2))))];    PartialOut=real(ifft(FreqValues));    %one IFFT output    indout=round(((k-1)*hopout+1):((k-1)*hopout+nfft));        %add current IFFT output to complete ouput vector    outputVec(:,indout)=outputVec(:,indout)+PartialOut;end%Normalise output audionormaliseOut=outputVec/max(max(abs(outputVec)));output='stretched.wav';audiowrite(output, normaliseOut, fs);